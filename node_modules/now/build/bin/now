#!/usr/bin/env node
'use strict';

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _crossSpawn = require('cross-spawn');

var _checkUpdate = require('../lib/check-update');

var _checkUpdate2 = _interopRequireDefault(_checkUpdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Native
var argv = (0, _minimist2.default)(process.argv.slice(2));

// options


// Ours


// Packages
var debug = argv.debug || argv.d;

// auto-update checking
var update = (0, _checkUpdate2.default)({ debug: debug });

var exit = function exit(code) {
  update.then(function () {
    return process.exit(code);
  });
  // don't wait for updates more than a second
  // when the process really wants to exit
  setTimeout(function () {
    return process.exit(code);
  }, 1000);
};

var defaultCommand = 'deploy';

var commands = new _set2.default([defaultCommand, 'list', 'ls', 'rm', 'remove', 'alias', 'aliases', 'ln', 'domain', 'domains', 'dns', 'cert', 'certs', 'secret', 'secrets']);

var aliases = new _map2.default([['ls', 'list'], ['rm', 'remove'], ['ln', 'alias'], ['aliases', 'alias'], ['domain', 'domains'], ['cert', 'certs'], ['secret', 'secrets']]);

var cmd = argv._[0];
var args = [];

if (cmd === 'help') {
  cmd = argv._[1];

  if (!commands.has(cmd)) {
    cmd = defaultCommand;
  }

  args.push('--help');
}

if (commands.has(cmd)) {
  cmd = aliases.get(cmd) || cmd;
  args = args.concat(process.argv.slice(3));
} else {
  cmd = defaultCommand;
  args = args.concat(process.argv.slice(2));
}

var bin = (0, _path.resolve)(__dirname, 'now-' + cmd);
if (process.pkg) {
  args.unshift('--entrypoint', bin);
  bin = process.execPath;
}

var proc = (0, _crossSpawn.spawn)(bin, args, {
  stdio: 'inherit',
  customFds: [0, 1, 2]
});

proc.on('close', function (code) {
  return exit(code);
});
proc.on('error', function () {
  return exit(1);
});