#!/usr/bin/env node
'use strict';

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var sync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(token) {
    var _this = this;

    var start, deploymentType, hasPackage, hasDockerfile, isStatic, _ref2, _ref3, _ref6, _ref6$pkg, _ref6$pkg$now, pkgConfig, now, pkgEnv, envs, secrets, findSecret, env_, env, url, elapsed, startU, complete;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            start = Date.now();


            if (!quiet) {
              console.log('> Deploying ' + _chalk2.default.bold((0, _toHumanPath2.default)(path)));
            }

            _context5.prev = 2;
            _context5.next = 5;
            return (0, _fsPromise.stat)(path);

          case 5:
            _context5.next = 11;
            break;

          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5['catch'](2);

            (0, _error.error)('Could not read directory ' + _chalk2.default.bold(path));
            process.exit(1);

          case 11:
            deploymentType = void 0;
            hasPackage = void 0;
            hasDockerfile = void 0;
            isStatic = void 0;

            if (!argv.docker) {
              _context5.next = 20;
              break;
            }

            if (debug) {
              console.log('> [debug] Forcing `deploymentType` = `docker`');
            }

            deploymentType = 'docker';
            _context5.next = 72;
            break;

          case 20:
            if (!argv.npm) {
              _context5.next = 24;
              break;
            }

            deploymentType = 'npm';
            _context5.next = 72;
            break;

          case 24:
            if (!argv.static) {
              _context5.next = 30;
              break;
            }

            if (debug) {
              console.log('> [debug] Forcing static deployment');
            }

            deploymentType = 'npm';
            isStatic = true;
            _context5.next = 72;
            break;

          case 30:
            _context5.prev = 30;
            _context5.next = 33;
            return (0, _fsPromise.stat)((0, _path.resolve)(path, 'package.json'));

          case 33:
            _context5.next = 38;
            break;

          case 35:
            _context5.prev = 35;
            _context5.t1 = _context5['catch'](30);

            hasPackage = true;

          case 38:
            _context5.t2 = _promise2.default;
            _context5.next = 41;
            return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return (0, _fsPromise.stat)((0, _path.resolve)(path, 'package.json'));

                    case 3:
                      _context.next = 8;
                      break;

                    case 5:
                      _context.prev = 5;
                      _context.t0 = _context['catch'](0);
                      return _context.abrupt('return', false);

                    case 8:
                      return _context.abrupt('return', true);

                    case 9:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, _this, [[0, 5]]);
            }))();

          case 41:
            _context5.t3 = _context5.sent;
            _context5.next = 44;
            return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
              return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;
                      _context2.next = 3;
                      return (0, _fsPromise.stat)((0, _path.resolve)(path, 'Dockerfile'));

                    case 3:
                      _context2.next = 8;
                      break;

                    case 5:
                      _context2.prev = 5;
                      _context2.t0 = _context2['catch'](0);
                      return _context2.abrupt('return', false);

                    case 8:
                      return _context2.abrupt('return', true);

                    case 9:
                    case 'end':
                      return _context2.stop();
                  }
                }
              }, _callee2, _this, [[0, 5]]);
            }))();

          case 44:
            _context5.t4 = _context5.sent;
            _context5.t5 = [_context5.t3, _context5.t4];
            _context5.next = 48;
            return _context5.t2.all.call(_context5.t2, _context5.t5);

          case 48:
            _ref2 = _context5.sent;
            _ref3 = (0, _slicedToArray3.default)(_ref2, 2);
            hasPackage = _ref3[0];
            hasDockerfile = _ref3[1];

            if (!(hasPackage && hasDockerfile)) {
              _context5.next = 71;
              break;
            }

            if (debug) {
              console.log('[debug] multiple manifests found, disambiguating');
            }

            if (!isTTY) {
              _context5.next = 68;
              break;
            }

            _context5.prev = 55;

            console.log('> Two manifests found. Press [' + _chalk2.default.bold('n') + '] to deploy or re-run with --flag');
            _context5.next = 59;
            return (0, _promptOptions2.default)([['npm', _chalk2.default.bold('package.json') + '\t' + _chalk2.default.gray('   --npm') + ' '], ['docker', _chalk2.default.bold('Dockerfile') + '\t' + _chalk2.default.gray('--docker') + ' ']]);

          case 59:
            deploymentType = _context5.sent;
            _context5.next = 66;
            break;

          case 62:
            _context5.prev = 62;
            _context5.t6 = _context5['catch'](55);

            (0, _error.error)(_context5.t6.message);
            process.exit(1);

          case 66:
            _context5.next = 69;
            break;

          case 68:
            (0, _error.error)('Ambiguous deployment (`package.json` and `Dockerfile` found). ' + 'Please supply `--npm` or `--docker` to disambiguate.');

          case 69:
            _context5.next = 72;
            break;

          case 71:
            if (hasPackage) {
              if (debug) {
                console.log('[debug] `package.json` found, assuming `deploymentType` = `npm`');
              }

              deploymentType = 'npm';
            } else if (hasDockerfile) {
              if (debug) {
                console.log('[debug] `Dockerfile` found, assuming `deploymentType` = `docker`');
              }

              deploymentType = 'docker';
            } else {
              if (debug) {
                console.log('[debug] No manifest files found, assuming static deployment');
              }

              isStatic = true;
            }

          case 72:
            _context5.next = 74;
            return (0, _readMetadata2.default)(path, {
              deploymentType: deploymentType,
              isStatic: isStatic,
              quiet: true
            });

          case 74:
            _ref6 = _context5.sent;
            _ref6$pkg = _ref6.pkg;
            _ref6$pkg = _ref6$pkg === undefined ? {} : _ref6$pkg;
            _ref6$pkg$now = _ref6$pkg.now, pkgConfig = _ref6$pkg$now === undefined ? {} : _ref6$pkg$now;
            now = new _lib2.default(apiUrl, token, { debug: debug });

            // Merge `now.env` from package.json with `-e` arguments.

            pkgEnv = pkgConfig.env;
            envs = [].concat((0, _toConsumableArray3.default)((0, _keys2.default)(pkgEnv || {}).map(function (k) {
              return k + '=' + pkgEnv[k];
            })), (0, _toConsumableArray3.default)([].concat(argv.env || [])));
            secrets = void 0;

            findSecret = function () {
              var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(uidOrName) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (secrets) {
                          _context3.next = 4;
                          break;
                        }

                        _context3.next = 3;
                        return now.listSecrets();

                      case 3:
                        secrets = _context3.sent;

                      case 4:
                        return _context3.abrupt('return', secrets.filter(function (secret) {
                          return secret.name === uidOrName || secret.uid === uidOrName;
                        }));

                      case 5:
                      case 'end':
                        return _context3.stop();
                    }
                  }
                }, _callee3, _this);
              }));

              return function findSecret(_x2) {
                return _ref7.apply(this, arguments);
              };
            }();

            _context5.next = 85;
            return _promise2.default.all(envs.map(function () {
              var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(kv) {
                var _kv$split, _kv$split2, key, rest, val, uidOrName, _secrets;

                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!(typeof kv !== 'string')) {
                          _context4.next = 3;
                          break;
                        }

                        (0, _error.error)('Env key and value missing');
                        return _context4.abrupt('return', process.exit(1));

                      case 3:
                        _kv$split = kv.split('='), _kv$split2 = (0, _toArray3.default)(_kv$split), key = _kv$split2[0], rest = _kv$split2.slice(1);
                        val = void 0;


                        if (rest.length > 0) {
                          val = rest.join('=');
                        }

                        if (!/[^A-z0-9_]/i.test(key)) {
                          _context4.next = 9;
                          break;
                        }

                        (0, _error.error)('Invalid ' + _chalk2.default.dim('-e') + ' key ' + _chalk2.default.bold('"' + _chalk2.default.bold(key) + '"') + '. Only letters, digits and underscores are allowed.');
                        return _context4.abrupt('return', process.exit(1));

                      case 9:
                        if (key) {
                          _context4.next = 12;
                          break;
                        }

                        (0, _error.error)('Invalid env option ' + _chalk2.default.bold('"' + kv + '"'));
                        return _context4.abrupt('return', process.exit(1));

                      case 12:
                        if (!(val === undefined)) {
                          _context4.next = 20;
                          break;
                        }

                        if (!(key in process.env)) {
                          _context4.next = 18;
                          break;
                        }

                        console.log('> Reading ' + _chalk2.default.bold('"' + _chalk2.default.bold(key) + '"') + ' from your env (as no value was specified)');
                        // escape value if it begins with @
                        val = process.env[key].replace(/^\@/, '\\@');
                        _context4.next = 20;
                        break;

                      case 18:
                        (0, _error.error)('No value specified for env ' + _chalk2.default.bold('"' + _chalk2.default.bold(key) + '"') + ' and it was not found in your env.');
                        return _context4.abrupt('return', process.exit(1));

                      case 20:
                        if (!(val[0] === '@')) {
                          _context4.next = 34;
                          break;
                        }

                        uidOrName = val.substr(1);
                        _context4.next = 24;
                        return findSecret(uidOrName);

                      case 24:
                        _secrets = _context4.sent;

                        if (!(_secrets.length === 0)) {
                          _context4.next = 30;
                          break;
                        }

                        if (uidOrName === '') {
                          (0, _error.error)('Empty reference provided for env key ' + _chalk2.default.bold('"' + _chalk2.default.bold(key) + '"'));
                        } else {
                          (0, _error.error)('No secret found by uid or name ' + _chalk2.default.bold('"' + uidOrName + '"'));
                        }
                        return _context4.abrupt('return', process.exit(1));

                      case 30:
                        if (!(_secrets.length > 1)) {
                          _context4.next = 33;
                          break;
                        }

                        (0, _error.error)('Ambiguous secret ' + _chalk2.default.bold('"' + uidOrName + '"') + ' (matches ' + _chalk2.default.bold(_secrets.length) + ' secrets)');
                        return _context4.abrupt('return', process.exit(1));

                      case 33:

                        val = { uid: _secrets[0].uid };

                      case 34:
                        return _context4.abrupt('return', [key, typeof val === 'string' ? val.replace(/^\\@/, '@') : val]);

                      case 35:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this);
              }));

              return function (_x3) {
                return _ref8.apply(this, arguments);
              };
            }()));

          case 85:
            env_ = _context5.sent;
            env = {};

            env_.filter(function (v) {
              return Boolean(v);
            }).forEach(function (_ref9) {
              var _ref10 = (0, _slicedToArray3.default)(_ref9, 2),
                  key = _ref10[0],
                  val = _ref10[1];

              if (key in env) {
                console.log('> ' + _chalk2.default.yellow('NOTE:') + ' Overriding duplicate env key ' + _chalk2.default.bold('"' + key + '"'));
              }

              env[key] = val;
            });

            _context5.prev = 88;
            _context5.next = 91;
            return now.create(path, {
              env: env,
              deploymentType: deploymentType,
              forceNew: forceNew,
              forceSync: forceSync,
              forwardNpm: alwaysForwardNpm || forwardNpm,
              quiet: quiet,
              wantsPublic: wantsPublic,
              isStatic: isStatic
            });

          case 91:
            _context5.next = 98;
            break;

          case 93:
            _context5.prev = 93;
            _context5.t7 = _context5['catch'](88);

            if (debug) {
              console.log('> [debug] error: ' + _context5.t7.stack);
            }

            (0, _error.handleError)(_context5.t7);
            process.exit(1);

          case 98:
            url = now.url;
            elapsed = (0, _ms2.default)(new Date() - start);

            if (!isTTY) {
              _context5.next = 116;
              break;
            }

            if (!clipboard) {
              _context5.next = 113;
              break;
            }

            _context5.prev = 102;
            _context5.next = 105;
            return (0, _copy2.default)(url);

          case 105:
            console.log(_chalk2.default.cyan('> Ready!') + ' ' + _chalk2.default.bold(url) + ' (copied to clipboard) [' + elapsed + ']');
            _context5.next = 111;
            break;

          case 108:
            _context5.prev = 108;
            _context5.t8 = _context5['catch'](102);

            console.log(_chalk2.default.cyan('> Ready!') + ' ' + _chalk2.default.bold(url) + ' [' + elapsed + ']');

          case 111:
            _context5.next = 114;
            break;

          case 113:
            console.log('> ' + url + ' [' + elapsed + ']');

          case 114:
            _context5.next = 117;
            break;

          case 116:
            process.stdout.write(url);

          case 117:
            startU = new Date();

            complete = function complete() {
              if (!quiet) {
                var elapsedU = (0, _ms2.default)(new Date() - startU);
                console.log('> Sync complete (' + (0, _bytes2.default)(now.syncAmount) + ') [' + elapsedU + '] ');
                console.log('> Initializing…');
              }

              // close http2 agent
              now.close();

              // show build logs
              printLogs(now.host);
            };

            if (now.syncAmount) {
              (function () {
                var bar = new _progress2.default('> Upload [:bar] :percent :etas', {
                  width: 20,
                  complete: '=',
                  incomplete: '',
                  total: now.syncAmount
                });

                now.upload();

                now.on('upload', function (_ref11) {
                  var names = _ref11.names,
                      data = _ref11.data;

                  var amount = data.length;
                  if (debug) {
                    console.log('> [debug] Uploaded: ' + names.join(' ') + ' (' + (0, _bytes2.default)(data.length) + ')');
                  }
                  bar.tick(amount);
                });

                now.on('complete', complete);

                now.on('error', function (err) {
                  (0, _error.error)('Upload failed');
                  (0, _error.handleError)(err);
                  process.exit(1);
                });
              })();
            } else {
              if (!quiet) {
                console.log('> Initializing\u2026');
              }

              // close http2 agent
              now.close();

              // show build logs
              printLogs(now.host);
            }

          case 120:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[2, 7], [30, 35], [55, 62], [88, 93], [102, 108]]);
  }));

  return function sync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _path = require('path');

var _progress = require('progress');

var _progress2 = _interopRequireDefault(_progress);

var _fsPromise = require('fs-promise');

var _bytes = require('bytes');

var _bytes2 = _interopRequireDefault(_bytes);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

var _copy = require('../lib/copy');

var _copy2 = _interopRequireDefault(_copy);

var _login = require('../lib/login');

var _login2 = _interopRequireDefault(_login);

var _cfg = require('../lib/cfg');

var cfg = _interopRequireWildcard(_cfg);

var _package = require('../../package');

var _buildLogger = require('../lib/build-logger');

var _buildLogger2 = _interopRequireDefault(_buildLogger);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _toHumanPath = require('../lib/utils/to-human-path');

var _toHumanPath2 = _interopRequireDefault(_toHumanPath);

var _promptOptions = require('../lib/utils/prompt-options');

var _promptOptions2 = _interopRequireDefault(_promptOptions);

var _error = require('../lib/error');

var _readMetadata = require('../lib/read-metadata');

var _readMetadata2 = _interopRequireDefault(_readMetadata);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ours


// Packages
var argv = (0, _minimist2.default)(process.argv.slice(2), {
  string: ['config', 'token'],
  boolean: ['help', 'version', 'debug', 'force', 'login', 'no-clipboard', 'forward-npm', 'docker', 'npm', 'static'],
  alias: {
    env: 'e',
    help: 'h',
    config: 'c',
    debug: 'd',
    version: 'v',
    force: 'f',
    token: 't',
    forceSync: 'F',
    login: 'L',
    public: 'p',
    'no-clipboard': 'C',
    'forward-npm': 'N'
  }
});

// Native


var help = function help() {
  console.log('\n  ' + _chalk2.default.bold('𝚫 now') + ' [options] <command | path>\n\n  ' + _chalk2.default.dim('Commands:') + '\n\n    deploy       [path]       Performs a deployment ' + _chalk2.default.bold('(default)') + '\n    ls | list    [app]        List deployments\n    rm | remove  [id]         Remove a deployment\n    ln | alias   [id] [url]   Configures aliases for deployments\n    domains      [name]       Manages your domain names\n    certs        [cmd]        Manages your SSL certificates\n    secrets      [name]       Manages your secret environment variables\n    help         [cmd]        Displays complete help for [cmd]\n\n  ' + _chalk2.default.dim('Options:') + '\n\n    -h, --help                Output usage information\n    -v, --version             Output the version number\n    -c ' + _chalk2.default.underline('FILE') + ', --config=' + _chalk2.default.underline('FILE') + '    Config file\n    -d, --debug               Debug mode [off]\n    -f, --force               Force a new deployment even if nothing has changed\n    -t ' + _chalk2.default.underline('TOKEN') + ', --token=' + _chalk2.default.underline('TOKEN') + '   Login token\n    -L, --login               Configure login\n    -p, --public              Deployment is public (' + _chalk2.default.dim('`/_src`') + ' is exposed) [on for oss, off for premium]\n    -e, --env                 Include an env var (e.g.: ' + _chalk2.default.dim('`-e KEY=value`') + '). Can appear many times.\n    -C, --no-clipboard        Do not attempt to copy URL to clipboard\n    -N, --forward-npm         Forward login information to install private NPM modules\n\n  ' + _chalk2.default.dim('Enforcable Types (when both package.json and Dockerfile exist):') + '\n\n    --npm                     Node.js application\n    --docker                  Docker container\n    --static                  Static file hosting\n\n  ' + _chalk2.default.dim('Examples:') + '\n\n  ' + _chalk2.default.gray('–') + ' Deploys the current directory\n\n    ' + _chalk2.default.cyan('$ now') + '\n\n  ' + _chalk2.default.gray('–') + ' Deploys a custom path ' + _chalk2.default.dim('`/usr/src/project`') + '\n\n    ' + _chalk2.default.cyan('$ now /usr/src/project') + '\n\n  ' + _chalk2.default.gray('–') + ' Lists all deployments with their IDs\n\n    ' + _chalk2.default.cyan('$ now ls') + '\n\n  ' + _chalk2.default.gray('–') + ' Associates deployment ' + _chalk2.default.dim('`deploymentId`') + ' with ' + _chalk2.default.dim('`custom-domain.com`') + '\n\n    ' + _chalk2.default.cyan('$ now alias deploymentId custom-domain.com') + '\n\n  ' + _chalk2.default.gray('–') + ' Stores a secret\n\n    ' + _chalk2.default.cyan('$ now secret add mysql-password 123456') + '\n\n  ' + _chalk2.default.gray('–') + ' Deploys with ENV vars (using the ' + _chalk2.default.dim('`mysql-password`') + ' secret stored above)\n\n    ' + _chalk2.default.cyan('$ now -e NODE_ENV=production -e MYSQL_PASSWORD=@mysql-password') + '\n\n  ' + _chalk2.default.gray('–') + ' Displays comprehensive help for the subcommand ' + _chalk2.default.dim('`list`') + '\n\n    ' + _chalk2.default.cyan('$ now help list') + '\n');
};

var path = argv._[0];

if (path) {
  // if path is relative: resolve
  // if path is absolute: clear up strange `/` etc
  path = (0, _path.resolve)(process.cwd(), path);
} else {
  path = process.cwd();
}

var exit = function exit(code) {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(function () {
    return process.exit(code || 0);
  }, 100);
};

// options
var debug = argv.debug;
var clipboard = !argv['no-clipboard'];
var forwardNpm = argv['forward-npm'];
var forceNew = argv.force;
var forceSync = argv.forceSync;
var shouldLogin = argv.login;
var wantsPublic = argv.public;
var apiUrl = argv.url || 'https://api.zeit.co';
var isTTY = process.stdout.isTTY;
var quiet = !isTTY;

if (argv.config) {
  cfg.setConfigFile(argv.config);
}

var config = cfg.read();
var alwaysForwardNpm = config.forwardNpm;

if (argv.h || argv.help) {
  help();
  exit(0);
} else if (argv.v || argv.version) {
  console.log(_chalk2.default.bold('𝚫 now'), _package.version);
  process.exit(0);
} else if (!(argv.token || config.token) || shouldLogin) {
  (0, _login2.default)(apiUrl).then(function (token) {
    if (shouldLogin) {
      console.log('> Logged in successfully. Token saved in ~/.now.json');
      process.exit(0);
    } else {
      sync(token).catch(function (err) {
        (0, _error.error)('Unknown error: ' + err.stack);
        process.exit(1);
      });
    }
  }).catch(function (e) {
    (0, _error.error)('Authentication error \u2013 ' + e.message);
    process.exit(1);
  });
} else {
  sync(argv.token || config.token).catch(function (err) {
    (0, _error.error)('Unknown error: ' + err.stack);
    process.exit(1);
  });
}

function printLogs(host) {
  // log build
  var logger = new _buildLogger2.default(host, { debug: debug, quiet: quiet });
  logger.on('close', function () {
    if (!quiet) {
      console.log('' + _chalk2.default.cyan('> Deployment complete!'));
    }
    process.exit(0);
  });
}